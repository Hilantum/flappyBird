[[ April 19h, 2024 ]]
Laid the structural work for the class. Making sure that everything is modular to an extend and organized. I created
the "GameFrame", "GamePanel", and "Game" classes. They are in a package because Eclipse (for some reason) forces only
package encompassing for files affected by the compiler. The "Game" class is in the default package because it will 
handle and affect all classes as the main game handling file.

[[ April 23rd, 2024 ]]
Today I'll be laying the ground work for the input handlers and finding methods for the gameloop. I'll be using MouseListener
and KeyListener for the input handling. For the gameloop, I think I'll either use timer since it's fairly automated, or I'll
make a loop myself in the Main class. 

[[ April 25th, 2024 ]]
I decided to not use the timer since it's single-threaded. I created my own thread and used some math to limit FPS so that
I don't get a crazy amount of threads that overloads the thread and makes graphics less smooth. I also made it so that it 
prints the amount of FPS. Not sure why it randomly changes from 120 to 119, may be a math issue. I'll look into it later. I
also added a config file so that I can change important values without having to search for them manually. I wanted to use
enumerated types but Java doesn't use them like Lua so they're a bit pointless for my goals.

[[ April 29th, 2024 ]]
I redid the gameloop to be more precise and compensate for lost time, so when a frame goes on for too long or too short the
delta for the next frame is impacted accordingly. I also redid a bit of the threading for the gameloop and changed the way it 
interacts with the gamepanel.

[[ May 1st, 2024 ]]
Made animations change. The class this is done in is called "AnimationHandler" or "AH" depending on where you see it 
referenced. There's a few issues with this still but it should be pretty simple to fix. I also think I'm going to just make the 
backgrounds line up x3 and move them ever second or two.

[[ May 3rd, 2024 ]]
Made the background move. The background consists of 3 platforms and 3 backgrounds that I may cache depending on grapics
optimization. They are causing quite a bit of lag, which I'll probably just solve next time. For now, the player and background 
are animated, but they do not depend on player input.

[[ May 7th, 2024 ]]
Player input now moves the character up and down, and when the player dies the background stops moving and the player falls
to death. Originally I used float valuse but I found a way to just use integers instead. I also decided caching was not
necessary as the images only truly load once and are applied after. Instead, I fixed the thread compensationn and switched from
using miliseconds entirely in favor of nanoseconds (System.nanoTime()).

[[ May 9th, 2024 ]] 
Polished the game a lot, fixed various bugs and cleaned the code for readability. I don't think that I'm going to finish the 
game fully even though that would likely only take around an hour. I learned quite a bit about graphics in Java and how a lot
of things apply universally, specifically to languages like Lua.
